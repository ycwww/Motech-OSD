//////////////////////////////////////////////////////////////////////////////
/*!\file slutqtxmloutputter.h
*  \author Dirk Peters
*  \date 18.11.2004
*  \brief headerfile for SlUtQtXMLOutputter class
*
*  This file is part of the HMI Solutionline UnitTest tools
*
* (C) Copyright Siemens AG A&D MC 2004. All rights reserved.
*/
///////////////////////////////////////////////////////////////////////////////

#if !defined(SLQTXMLOUTPUTTER_H)
#define SLQTXMLOUTPUTTER_H

#include <QtCore/qtextstream.h>
#include <QtCore/qstringlist.h>

#include "slutoutputterbase.h"
#include "sluttestrunnerexport.h"



/*! \class SlUtIndentString
*	\brief a little Wrapper Class for a QString with "\t" inserted by calling the operator ++
*   and deleting "\t" by calling the operator -- for easy handling indention in XML files
*   generated by the SlUtQtXMLOutputter
*/

class SL_UT_RUNNER_EXPORT SlUtIndentString
{
public:
	///////////////////////////////////////////////////////////////////////////
	//Creators
	/*! \fn SlUtIndentString()
	*	
	*	constructor
	*/
	SlUtIndentString();

	///////////////////////////////////////////////////////////////////////////
	//Manipulators
	/*! \fn SlUtIndentString& operator++(int)
	*	postfix operator ++
	*/
	SlUtIndentString operator++(int);
	
	/*! \fn SlUtIndentString& operator++()
	*	präfix operator ++
	*/
	SlUtIndentString& operator++();

	/*! \fn SlUtIndentString& operator--(int)
	*	postfix operator --
	*/
	SlUtIndentString operator--(int);

	/*! \fn SlUtIndentString& operator--()
	*	präfix operator --
	*/
	SlUtIndentString& operator--();

	///////////////////////////////////////////////////////////////////////////
	//Accessors
	/*! \fn QTextStream& operator<<(QTextStream& stream,SlUtIndentString)
	*/
	friend QTextStream& operator<<(QTextStream& stream,SlUtIndentString);

private:
	///////////////////////////////////////////////////////////////////////////
	//Private data
	/*! QString containing one or more occurences of "\t"*/
	QString m_szTabs;
	
};

// forward declarations
class SlUtModuleSummary;

/*! \class SlUtQtXMLOutputter
*	prints results of a test run to a QTextStream in a XML- Format
*/

class SL_UT_RUNNER_EXPORT SlUtQtXMLOutputter: public SlUtOutputterBase
{
public:
	SlUtQtXMLOutputter( QTextStream& out);

	virtual ~SlUtQtXMLOutputter();

	/*! \fn void printPassed(QString file, int line, QString expr, QString desc="")*/
    virtual void printPassed(QString file, int line, QString expr, QString desc="");

	/*! \fn void printFailure( QString path, QString file, int line, QString expr, QString desc="")*/
	virtual void printFailure( QString path, QString file, int line, QString expr, QString desc="");
	
	/*!\fn void printError( QString path, QString File, int line,QString expr, QString desc)*/
	virtual void printError( QString path, QString File, int line,QString expr, QString desc);
	
	/*!\fn void printMessage(QString message)
	*  print a messag which doesn't fit into another categorie
	*/
	virtual void printMessage(QString message);

	/*!\fn void printSummary(QString module,int total, int failed, int error, int moduleDepth)
	*  print a summary for the module "module" which is at depth "moduledepth" with
	*  "total" total tests where "failed" failed and "error" produced unexpected errors
	*/
	virtual void printSummary(QString module,int total, int failed, int error, int moduleDepth,int maxedepth);
	
	/*! \fn virtual void printStatistics( SlUtStatistics* pStatistic)
	*	print statistics (replaces printSummary(..))
	*/
	virtual void printStatistics( SlUtStatistics* pStatistic);

	/*!\fn void flush()
	*  write finally and close outputstream, output finished!
	*/
	virtual void flush();
private:
	///////////////////////////////////////////////////////////////////////////
	//private helper
	/*! \fn void onNewTest()
	*	prepares the stream for a new testrun
	*/
	void onNewTest();

	/*! \fn	void onNewSummary( int maxModuleDepth )
	*	
	*/
	void onNewSummary( int maxModuleDepth );

  /*! \fn	void printChild(QStringList tempChilds,SlUtModuleSummary* tempSummary);
   *	
   * print statiscs of all childs in tempChilds
   *
   * \param   tempChilds      List of chlids
   * \param   tempSummary     current module summary
   *
  */
  void printChildStatistics(QStringList tempChilds,SlUtModuleSummary* tempSummary);


/*	QStringList searchParents();
*/
	QStringList sortParents( QStringList parents);
	///////////////////////////////////////////////////////////////////////////
	//private data

	QTextStream& m_rOut;

	SlUtIndentString m_szIndent;

	bool m_bNewTest;

	bool m_bNewSummary;

	int m_nLastDepth;
	///////////////////////////////////////////////////////////////////////////
	//prevent use of
	//default and copy constructor and assignment operator

	SlUtQtXMLOutputter();
	SlUtQtXMLOutputter(SlUtQtXMLOutputter&);
	SlUtQtXMLOutputter& operator=(SlUtQtXMLOutputter&);
};


#endif
