///////////////////////////////////////////////////////////////////////////////
/*! \file    slhmincklatin1toutf8.h
 *  \author Adam Gorecki
 *  \date   14.07.2014
 *  \brief  Class declaration file for class SlHmiNCKLatin1ToUtf8
 *
 *  This file is part of the HMI Solutionline GUI Framework.
 *
 * (C) Copyright Siemens AG 2014. All rights reserved.
 */
///////////////////////////////////////////////////////////////////////////////

#ifndef SLHMINCKLATIN1TOUTF8_H
#define SLHMINCKLATIN1TOUTF8_H

#include <QtCore/QByteArray>

#if !defined(SL_HMI_EXPORT)
#   if defined(Q_OS_WIN32) || defined(Q_OS_WIN64)
#	    ifdef SL_HMI_MAKE_DLL
#		    define SL_HMI_EXPORT  __declspec(dllexport)
#	    else
#		    define SL_HMI_EXPORT  __declspec(dllimport)
#	    endif
#   else
#	    define SL_HMI_EXPORT
#   endif
#endif

/*!
 * \class SlHmiNckLatin1ToUtf8
 * this class converts content of an ini text file generated by NCK in latin1
 * into utf8.
 * NCK converts all codings of hex values in a nck ini file into treu byte values
 * f.e. 'HC3''HA4' into 0xc3 0xae => ä , it means hex byte value of ä is c3a4
 * so we will find 0x27(') 0x48(H) 0x43(C) 0x33(3) 0x27(') 0x27(') 0x48(H) 0x41(A) 0x34(4) 0x27(') 
 * and replace them by 0xc3 0xa4 (ä)
 * we handle only exact match.
 */
class SL_HMI_EXPORT SlHmiNckLatin1ToUtf8
{
public:
   /*!
    * \fn int convertNckLatin1ToUtf8(QByteArray& rData)
    *
    * \param rData         data to replace all latin1 codings of utf-8 by true utf-8
    *
    * \return count of all found and converted signs.
    *
    * converter function. This function converts all hex  bytes signs coded from nck in
    * latin1 f.e. 'HC3''HA4' into true hex values 0xc3 0xa4.
    */
   static int convertNckLatin1ToUtf8(QByteArray& rData);

private:
   /*!
    * \enum SlHmiNckLatin1ToUtf8States
    *
    * enum with parse states for look after
    * utf-8 codings in latin1 nck ini files
    */
   enum SlHmiNckLatin1ToUtf8States
   {
      SL_HMI_L1_UTF8_NONE,          //!< nothing found
      SL_HMI_L1_UTF8_1ST_BYTE_START,//!< first apostrophe found
      SL_HMI_L1_UTF8_1ST_BYTE_H,    //!< leading H after apostrophe found
      SL_HMI_L1_UTF8_1ST_BYTE_PAGE, //!< leading digit after H found
      SL_HMI_L1_UTF8_1ST_BYTE,      //!< byte for utf-8 sign found
      SL_HMI_L1_UTF8_1ST_BYTE_END,  //!< closing apostrophe for byte found
   };
}; // <-- SlHmiNckLatin1ToUtf8

#endif // <-- SLHMINCKLATIN1TOUTF8_H
