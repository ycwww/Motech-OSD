///////////////////////////////////////////////////////////////////////////////
/*! \file   slmasynchronactionsdetails.h
 *  \author Walter Daners
 *  \date   13.09.2006
 *  \brief  Definition file for class SlMaSynchronActionsDetails
 *
 *  This file is part of the HMI Solutionline.
 *
 *  (C) Copyright Siemens AG A&D MC 2006. All rights reserved.
 */
///////////////////////////////////////////////////////////////////////////////
#ifndef SL_MA_SYNCHRON_ACTIONS_DETAILS_H_INCLUDED
#define SL_MA_SYNCHRON_ACTIONS_DETAILS_H_INCLUDED


#include "slmalogicexports.h"
#include "slmaformlogicbase.h"
#include <QtCore/QObject>


class SlMaSynchronActionsDetailsPrivate;


/*!
 *  \class  SlMaSynchronActionsDetails
 *  \brief  Implementation class for Synchron-Actions-Form
 */
class SL_MA_LOGIC_EXPORT SlMaSynchronActionsDetails : public SlMaFormLogicBase
{
   Q_OBJECT

public:

   ///////////////////////////////////////////////////////////////////////////
   // CREATORS
   ///////////////////////////////////////////////////////////////////////////

   /*!
    *  \brief  Default Constructor of SlMaTfsForm
    *
    *  \param  pParent  in: parent object  - default=0 (standard QT)
    *  \param  rsName   in: debug name     - default=0 (standard QT)
    */
   SlMaSynchronActionsDetails (QString& rInstancePath /* =0 */, QObject* pParent = 0);

   /*!
    *  \brief  Default destructor of SlMaTfsForm
    */
   virtual ~SlMaSynchronActionsDetails ();

   ///////////////////////////////////////////////////////////////////////////////
   // public MANIPULATORS
   ///////////////////////////////////////////////////////////////////////////////

   ///////////////////////////////////////////////////////////////////////////
   // public ACCESSORS
   ///////////////////////////////////////////////////////////////////////////
   
public slots:

   ///////////////////////////////////////////////////////////////////////////
   // public SLOTS
   ///////////////////////////////////////////////////////////////////////////

signals:

   ///////////////////////////////////////////////////////////////////////////
   // SIGNALS
   ///////////////////////////////////////////////////////////////////////////

protected:

   ///////////////////////////////////////////////////////////////////////////
   // protected methods
   ///////////////////////////////////////////////////////////////////////////


   ///////////////////////////////////////////////////////////////////////////
   // protected methods  - system overrides
   ///////////////////////////////////////////////////////////////////////////

private:

   ///////////////////////////////////////////////////////////////////////////
   // private members
   ///////////////////////////////////////////////////////////////////////////

   SlMaSynchronActionsDetailsPrivate*     m_pData;

   ///////////////////////////////////////////////////////////////////////////
   // private METHODS
   ///////////////////////////////////////////////////////////////////////////

   /*! copy constructor not allowed */
   SlMaSynchronActionsDetails (const SlMaSynchronActionsDetails& rCopy);

   /*! assignment operator not allowed */
   SlMaSynchronActionsDetails& operator=(const SlMaSynchronActionsDetails& rCopy);

   ///////////////////////////////////////////////////////////////////////////
   // private MANIPULATORS
   ///////////////////////////////////////////////////////////////////////////

  void initStaticValues(void);
  void initDummyValues (void);
  void connectToNck (bool isInit = true);
  void resumeToNck (void);
  void disconnectToNck (void);
  void suspendToNck (void);
  void connectToLogic (void);
  void disconnectToLogic (void);
};

#endif // SL_MA_SYNCHRON_ACTIONS_DETAILS_H_INCLUDED
